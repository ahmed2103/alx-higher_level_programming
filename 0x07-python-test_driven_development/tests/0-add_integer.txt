===============================
How to use 0-add_integer.py
===============================

This module contains a single function named ``add_integer()``.

Functionality
=============

The ``add_integer()`` function calculates the sum of its arguments. When working with numerical values, this function replicates the behavior of the ``+`` operator.

Examples
--------

Numeric Input:
    >>> add_integer = __import__("0-add_integer").add_integer
    >>> add_integer(2, 3)
    5

It also handles floating-point numbers and converts them to integers:
    >>> add_integer(2.0, 3.0)
    5

If 'a' is not provided, it defaults to 98:
    >>> add_integer(0)
    98

If 'b' is not specified, it defaults to 98:
    >>> add_integer(2.0,)
    100

Additional Examples:
    >>> add_integer(-5.5, 100.3)
    95

Handling Non-Numeric Input
===========================

The function raises TypeError exceptions when non-numeric values are provided:

    >>> add_integer('a', 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, ['A', 'B', 'C'])
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer({'a': 1})
    Traceback (most recent call last):
    TypeError: a must be an integer

Handling Special Cases
=======================

The function handles special cases involving float values:

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
